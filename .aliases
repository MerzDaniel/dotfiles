# .aliases

# deps
dependencies_install() {
  pacman -S fzf the_silver_searcher jq jo go
  go install github.com/miko/go-graphql-cli@latest
}


# quickly update aliases
alias al='vim ~/.aliases && . ~/.aliases && echo Resourced ~/.aliases'
# quickly update path
alias pa='vim ~/.path && . ~/.path && echo Resourced ~/.path'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'

# quickly jump to a sub directory
c() {
	dir=$(find -maxdepth 3 -type d | fzf)
	cd "$dir"
}

alias ls='ls --color=auto'
alias la='ls -a'
alias ll='ls -l'
alias lla='ls -la'

# network
alias ip6='ip address | grep inet6'
alias host='getent hosts'

# pass
alias pass='PASSWORD_STORE_ENABLE_EXTENSIONS=true pass'
alias pw='pass fzf -c'

# github
#
# quick clone own repos, fill the .repos file with update script below
gclonefzf() {
  cat ~/.repos | fzf | xargs -i git clone git@github.com:{}
}
# gclone <owner/repo>
gclone() {
  if [ "$1" == "" ] ; then
    gclonefzf
  else
    git clone git@github.com:$1
  fi
}
json_escape_string() (
  # outputs the escaped string like this: "<escaped_string>"
  if [ "$1" = "" ] ; then echo 'No argument given' >&2; exit 1; fi

  jq -n --arg var "$1" '$var'
  # | sed 's/^.\(.*\).$/\1/'
)
graphql_request() (
  url=$1
  headers=$2
  query=$3
  variables=$4
  variables=${variables:+",\"variables\": $variables"}
  curl -sH "$headers" --json "{ \"query\": $(json_escape_string $query) $variables }" $url
)
github_get_repos() (
  header="Authorization: token $GITHUB_TOKEN"
  url='https://api.github.com/graphql'
  query='{owner: repositoryOwner(login: "actano"){repositories(last: 1 orderBy: { direction:ASC field:NAME } privacy:PRIVATE) {edges{cursor}}}}'

  last_cursor=$(graphql_request "$url" "$header" "$query" | jq --raw-output '.data.owner.repositories.edges[0].cursor')
  echo $last_cursor
  # exit 0

  query='query($after: String $login: String!){owner: repositoryOwner(login: $login){
   repositories(first: 100 after: $after orderBy: { direction:ASC field:NAME } privacy:PRIVATE){ edges{
     cursor
     node { name owner {login} }
   }}
  }}'
  cursor=

  while [ "$last_cursor" != "$cursor" ] ; do

    # echo iteration
    if [ "$cursor" != "" ] ; then
      result=$(graphql_request "$url" "$header" "$query" "{\"after\":\"$cursor\", \"login\":\"actano\"}")
    else
      result=$(graphql_request "$url" "$header" "$query" "{\"login\":\"actano\"}")
    fi
    # echo Result: $result
    # echo $result

    cursor=$(echo $result | jq --raw-output '.data.owner.repositories.edges[-1].cursor')
    echo Current cursor: $cursor
    echo $result | jq --raw-output '.data.owner.repositories.edges[].node| .owner.login + "/" + .name'

  done
)
github_update_repo_list() (
  github_get_repos > ~/.repos
)
